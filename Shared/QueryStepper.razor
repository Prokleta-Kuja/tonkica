@using Microsoft.AspNetCore.WebUtilities
<div class="btn-group" role="group">
    @if(_isActive)
    {
        <button class="btn btn-outline-secondary" @onclick=Decrement><span>&laquo;</span></button>
        <button class="btn btn-secondary" title="Disable" @onclick=Toggle @ref=Input>@Value</button>
        <button class="btn btn-outline-secondary" @onclick=Increment><span>&raquo;</span></button>
    }
    else
    {
        <button class="btn btn-outline-secondary disabled" @onclick=Decrement><span>&laquo;</span></button>
        <button class="btn btn-outline-secondary" title="Enable" @onclick=Toggle @ref=Input>
            @(InactiveText == null ? Value : InactiveText)
        </button>
        <button class="btn btn-outline-secondary disabled" @onclick=Increment><span>&raquo;</span></button>
    }
</div>

@code{
    [Inject] private NavigationManager _navManager { get; set; } = null!;
    private bool _isActive;
    public int Value { get; set; }
    private ElementReference Input;
    [Parameter] public string QueryPart { get; set; } = null!;
    [Parameter] public EventCallback<int?> OnChange { get; set; }
    [Parameter] public EventCallback<bool> OnOverflow {get;set;}
    [Parameter] public bool Overflow { get; set; }
    [Parameter] public int Min { get; set; } = int.MinValue;
    [Parameter] public int Max { get; set; } = int.MaxValue;
    [Parameter] public int DefaultValue { get; set; }
    [Parameter] public bool DefaultActive { get; set; }
    [Parameter] public string? InactiveText { get; set; }
    [Parameter] public bool AutoFocus { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender && AutoFocus)
            await Input.FocusAsync();
    }

    protected override void OnInitialized()
    {
        if(string.IsNullOrWhiteSpace(QueryPart))
            throw new ArgumentNullException(QueryPart);

        Value = DefaultValue;
        _isActive = DefaultActive;

        var uri = new Uri(_navManager.Uri);
        var qs = QueryHelpers.ParseQuery(uri.Query);
        
        if(qs.TryGetValue(QueryPart,out var year))
        {
            Value = Convert.ToInt32(year);
            _isActive = true;
        }
    }

    private async Task Increment()
    {
        if(Value == Max)
            if(Overflow)
            {
                Value = Min;
                if(OnOverflow.HasDelegate)
                    await OnOverflow.InvokeAsync(true);
            }
            else
                return;
        else
            Value++;

        if(_isActive)
            await Update();
    }
    private async Task Decrement()
    {
        if(Value == Min)
            if(Overflow)
            {
                Value = Max;
                if(OnOverflow.HasDelegate)
                    await OnOverflow.InvokeAsync(false);
            }
            else
                return;
        else
            Value--;

        if(_isActive)
            await Update();
    }
    private async Task Toggle()
    {
        if(_isActive)
            Value = DefaultValue;

        _isActive = !_isActive;
        await Update();
    }
    private async Task Update()
    {
        if(OnChange.HasDelegate)
        {
            await OnChange.InvokeAsync(_isActive ? Value : null);
        }

        var uri = new Uri(_navManager.Uri);
        var qs = QueryHelpers.ParseQuery(uri.Query);

        if(_isActive)
            qs[QueryPart] = Value.ToString();
        else
            qs.Remove(QueryPart);

        _navManager.NavigateTo(QueryHelpers.AddQueryString(uri.LocalPath, qs));
    }
}